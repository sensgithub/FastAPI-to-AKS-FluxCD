apiVersion: v1
kind: ConfigMap
metadata:
  name: fastapi-app-config
  namespace: default
data:
  INIT_DB: "true"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-sql
  namespace: default
data:
  init.sql: |
    DO $$ 
    BEGIN 
        IF NOT EXISTS (SELECT 1 FROM pg_database WHERE datname = 'fastapi') THEN
            CREATE DATABASE fastapi;
        END IF;
    END $$;
    \c fastapi;
    CREATE TABLE IF NOT EXISTS persons (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255),
        age INT
    );
    INSERT INTO persons (name, age) VALUES ('Dobrin', 21), ('Vasil', 34) ON CONFLICT DO NOTHING;
---
apiVersion: v1
kind: Secret
metadata:
  name: db-secret
  namespace: default
type: Opaque
data:
  POSTGRES_USER: cG9zdGdyZXM= 
  POSTGRES_PASSWORD: YmFrZGF0YXBnc3FsMTIzIQ==  
  POSTGRES_DB: ZmFzdGFwaQ==
  DATABASE_URL: cG9zdGdyZXNxbCthc3luY3BnOi8vcG9zdGdyZXM6YmFrZGF0YXBnc3FsMTIzIUBwb3N0Z3Jlcy1zZXJ2aWNlOjU0MzIvZmFzdGFwaQ==
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fastapi-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: fastapi-app
  template:
    metadata:
      labels:
        app: fastapi-app
    spec:
      initContainers:
      - name: wait-for-db
        image: postgres:13
        command: ['sh', '-c', 
          'until pg_isready -h postgres-service -U postgres; do echo waiting for database; sleep 2; done;']
      containers:
        - name: fastapi-app
          image: appbakdata.azurecr.io/bakdata/fastapi-app-db:421a09a43159945d4b0f8f44303a092a2128010c
          ports:
            - containerPort: 8000
          envFrom:
            - configMapRef:
                name: fastapi-app-config
            - secretRef:
                name: db-secret
          resources:
            requests:
              memory: "256Mi"  
              cpu: "250m"      
            limits:
              memory: "512Mi"
              cpu: "500m"
          startupProbe:
            httpGet:
              path: /health
              port: 8000
            failureThreshold: 30
            periodSeconds: 10
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
spec:
  replicas: 1  
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:13
        ports:
        - containerPort: 5432
        envFrom:
        - secretRef:
            name: db-secret
        resources:
          requests:
            memory: "750Mi"  
            cpu: "500m"     
          limits:
            memory: "1Gi"
            cpu: "1"
        readinessProbe:
          exec:
            command: ["pg_isready", "-U", "postgres"]
          initialDelaySeconds: 5
          periodSeconds: 10
        volumeMounts:
        - name: init-sql-volume
          mountPath: /docker-entrypoint-initdb.d/
          readOnly: true
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: init-sql-volume
        configMap:
          name: postgres-init-sql
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
spec:
  ports:
  - port: 5432
  selector:
    app: postgres
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: fastapi-service
spec:
  selector:
    app: fastapi-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8000
  type: LoadBalancer
